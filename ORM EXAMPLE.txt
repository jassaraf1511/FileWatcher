https://www.c-sharpcorner.com/UploadFile/4d9083/mapping-stored-procedures-and-getting-multiple-records-from/
 try
 {
     var sql = "CorporateActions.dbo.sp_get_storeprocedure_parameters";
     using (connection = _dbContext.CreateConnection())
     {
         var para = new DynamicParameters();

         para.Add("@sp_name", "sp_insert_Swift_Message");
         connection.Open();
         var multi = connection.QueryMultiple(sql, para);
         var result =  multi.Read<Parameters>().ToList();
         if (result != null) { int i = 0; }

         foreach (Parameters parm in result)
         {
             Console.WriteLine(parm.ToString());
         }
         connection.Close();

     }
 }
  
 catch (Exception ex)
 {
     _logger.LogError(ex, "{Message}", ex.Message);
     throw;
 }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Safra.CorporateActions.Domain.Entities
{
    public class Parameters
    {
        public string? ParameterName { get; set; }
        public string? ParameterType { get; set; }
        public string? ParameterLength { get; set; }
        public string? ParameterPrec { get; set; }
        public string? ParameterScale { get; set; }
        public string? ParameterPosition { get; set; }
        public string? ParameterIsResult { get; set; }
        public string? ParameterCollation { get; set; }
    }
}

  public async Task<bool> CreateAnnouncementSwiftMessage(AnnouncementSwiftMessage caSwiftMessage)
  {
      IDbConnection? connection = null;
      SqlMapper.AddTypeHandler(new SqlDateOnlyTypeHandler());
      SqlMapper.AddTypeHandler(new SqlTimeOnlyTypeHandler());
      try
      {
          var sql = "CorporateActions.dbo.sp_insert_Swift_Message " +
              "@Message_ID, " +
              "@MessageType, " +
              "@SenderBIC, " +
              "@Depositary_ID, " +
              "@CorporateActionReference, " +
              "@Messagefunction, " +
              "@ProcStatusCode, " +
              "@Mandatoryvoluntaryindicator, " +
              "@Eventtype, " +
              "@SwiftMessage, " +
              "@SwiftMessageFileName, " +
              "@Status, " +
              "@ErrorType, " +
              "@ErrorReason, " +
              "@ReceiptDate, " +
              "@CreationDate, " +
              "@UpdatedDate, " +
              "@CancelationDate, " +
              "@CreatedBy, "+
              "@UpdatedBy, " +
              "@CanceledBy";

          using (connection = _dbContext.CreateConnection())
          {
              connection.Open();
              var parameters = new DynamicParameters();

              parameters.Add("Message_ID", caSwiftMessage.Message_ID, DbType.String);                    
              parameters.Add("MessageType", caSwiftMessage.MessageType, DbType.String);
              parameters.Add("SenderBIC", caSwiftMessage.SenderBIC, DbType.String);
              parameters.Add("Depositary_ID", caSwiftMessage.Depositary_ID, DbType.String);
              parameters.Add("CorporateActionReference", caSwiftMessage.CorporateActionReference, DbType.String);
              parameters.Add("Messagefunction", caSwiftMessage.Messagefunction, DbType.String);
              parameters.Add("ProcStatusCode", caSwiftMessage.ProcStatusCode, DbType.String);
              parameters.Add("Mandatoryvoluntaryindicator", caSwiftMessage.Mandatoryvoluntaryindicator, DbType.String);
              parameters.Add("Eventtype", caSwiftMessage.Eventtype, DbType.String);
              parameters.Add("SwiftMessage", caSwiftMessage.SwiftMessage, DbType.String);
              parameters.Add("SwiftMessageFileName", caSwiftMessage.SwiftMessageFileName, DbType.String);

              parameters.Add("Status", caSwiftMessage.Status, DbType.String);
              parameters.Add("ErrorType", caSwiftMessage.ErrorType, DbType.String);
              parameters.Add("ErrorReason", caSwiftMessage.ErrorReason, DbType.String);

              parameters.Add("ReceiptDate", caSwiftMessage.ReceiptDate, DbType.DateTime); 
              parameters.Add("CreationDate", caSwiftMessage.CreationDate,DbType.DateTime);
              parameters.Add("UpdatedDate", caSwiftMessage.UpdatedDate, DbType.DateTime);
              parameters.Add("CancelationDate", caSwiftMessage.CancelationDate, DbType.DateTime);

              parameters.Add("CreatedBy", caSwiftMessage.CreatedBy);
              parameters.Add("UpdatedBy", caSwiftMessage.UpdatedBy);
              parameters.Add("CanceledBy", caSwiftMessage.CanceledBy);
            var result=  await connection.ExecuteAsync(sql, parameters);
              string test = result.ToString();
              connection.Close();

          }
          return true;  //((object)caSwiftMessage.ReceiptDate) ?? DBNull.Value))
      }
      catch (Exception ex)
      {
          _logger.LogError(ex, "{Message}", ex.Message);
          throw;
      }
      finally
      {
          if (connection != null)
              if (connection.State == ConnectionState.Open)
                  connection.Close();
      }
  }

https://www.codeproject.com/Articles/1064221/Clr-Type-To-SqlDbType-Mapper-for-Csharp
http://dotnetpulse.blogspot.com/2006/04/convert-net-type-to-sqldbtype-or.html
private SqlDbType GetDBType(System.Type theType)
https://stackoverflow.com/questions/1574867/convert-datacolumn-datatype-to-sqldbtype
private SqlDbType GetDBType(System.Type theType)
{
    System.ComponentModel.TypeConverter tc;
    Microsoft.Data.SqlClient.SqlParameter p1 = new Microsoft.Data.SqlClient.SqlParameter();
    tc = System.ComponentModel.TypeDescriptor.GetConverter(p1.DbType);
    if (tc.CanConvertFrom(theType))
    {
        p1.DbType = (DbType)tc.ConvertFrom(theType.Name);
    }
    else
    {
        //Try brute force
        try
        {
            p1.DbType = (DbType)tc.ConvertFrom(theType.Name);
        }
        catch (Exception)
        {
            //Do Nothing; will return NVarChar as default
        }
    }
    DbType test= (DbType)p1.DbType;
    Console.WriteLine(test.ToString());
    return p1.SqlDbType;
}
Private Function GetDBType(ByVal theType As System.Type) As SqlDbType
    Dim p1 As SqlClient.SqlParameter
    Dim tc As System.ComponentModel.TypeConverter
    p1 = New SqlClient.SqlParameter()
    tc = System.ComponentModel.TypeDescriptor.GetConverter(p1.DbType)
    If tc.CanConvertFrom(theType) Then
        p1.DbType = tc.ConvertFrom(theType.Name)
    Else
        'Try brute force
        Try
            p1.DbType = tc.ConvertFrom(theType.Name)
        Catch ex As Exception
            'Do Nothing
        End Try
    End If
    Return p1.SqlDbType
End Function
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System;
using System.Collections.Generic;
using System.Data;

namespace Safra.CorporateActions.Domain.Entities
{
    public static class ClrTypeToDbTypeMapper
    {
        #region Constructors

        /// <summary>
        /// Initializes the <see cref="ClrTypeToDbTypeMapper"/> class.
        /// </summary>
        static ClrTypeToDbTypeMapper()
        {
            CreateClrTypeToSqlTypeMaps();
        }

        #endregion

        #region Public  Members

        /// <summary>
        /// Gets the mapped DbType for the specified CLR type.
        /// </summary>
        /// <param name="clrType">The CLR Type to get mapped DbType for.</param>
        /// <returns></returns>
        public static DbType GetDbTypeFromClrType(Type clrType)
        {
            if (!_clrTypeToSqlTypeMaps.ContainsKey(clrType))
            {
                throw new ArgumentOutOfRangeException("clrType", @"No mapped type found for " + clrType);
            }

            DbType result;
            _clrTypeToSqlTypeMaps.TryGetValue(clrType, out result);
            return result;
        }

        #endregion

        #region Private Members

        private static void CreateClrTypeToSqlTypeMaps()
        {
            _clrTypeToSqlTypeMaps = new Dictionary<Type, DbType>
            {
                {typeof (Boolean), DbType.Boolean},
                {typeof (Boolean?), DbType.Boolean},
                {typeof (Byte), DbType.Byte},
                {typeof (Byte?), DbType.Byte},
                {typeof (String), DbType.String},
                {typeof (DateTime), DbType.DateTime},
                {typeof (DateTime?), DbType.DateTime},
                {typeof (Int16), DbType.Int16},
                {typeof (Int16?), DbType.Int16},
                {typeof (Int32), DbType.Int32},
                {typeof (Int32?), DbType.Int32},
                {typeof (Int64), DbType.Int64},
                {typeof (Int64?), DbType.Int64},
                {typeof (Decimal), DbType.Decimal},
                {typeof (Decimal?), DbType.Decimal},
                {typeof (Double), DbType.Double},
                {typeof (Double?), DbType.Double},
                {typeof (Single), DbType.Decimal},
                {typeof (Single?), DbType.Decimal},
                {typeof (TimeSpan), DbType.Time},
                {typeof (Guid), DbType.Guid},
                {typeof (Guid?), DbType.Guid},
                {typeof (Byte[]), DbType.Binary},
                {typeof (Byte?[]), DbType.Binary},
                {typeof (Char[]), DbType.String},
                {typeof (Char?[]), DbType.String}
            };
        }

        private static Dictionary<Type, DbType> _clrTypeToSqlTypeMaps; // = new 

        #endregion
    }
}



 string test="";
 Type value = test.GetType();
 SqlDbType actual = ClrTypeToSqlDbTypeMapper.GetSqlDbTypeFromClrType(value);
 int i = findItemIndex(TagIdEnum.ReferenceTag, TagQualifiertEnum.SEME);
int i = findItemIndex(TagIdEnum.ReferenceTag, TagQualifiertEnum.SEME);
Console.WriteLine(i);
int startIndex = findItemIndexByTagNameAndQualifier("16R", "SECMOVE");
int endIndex = findItemIndexByTagNameAndQualifier("16S", "SECMOVE");
var result = this.parsedMessage.Bloack4ListOfBusinessRules.Skip(startIndex + 1).Take(endIndex - 1 - startIndex);

if (parsedMessage.Bloack4ListOfBusinessRules.ElementAt(0).BusinessRuleType == typeof(FlagRule))
{
    Console.WriteLine("OK");
    FlagRule R = (FlagRule)parsedMessage.Bloack4ListOfBusinessRules.ElementAt(0);
    Console.WriteLine(R.Flag);
}
foreach (IBusinessRule tag in result)
{
    
    Console.WriteLine(tag.TagName);
    Console.WriteLine(tag.SwiftText);
}
            


https://www.dpriver.com/pp/sqlformat.htmprivate int findItemIndex(TagIdEnum tagId, TagQualifiertEnum qualifierId)
https://stackoverflow.com/questions/9808035/how-do-i-make-the-return-type-of-a-method-generic
https://www.google.com/search?q=csharp+how+to+call+a+method+and+returning+a+T+generique&rlz=1C1CHBD_enUS897US897&oq=csharp+how+to+call+a+method+and+returning+a+T+generique+&gs_lcrp=EgZjaHJvbWUyCQgAEEUYORigATIHCAEQIRirAjIHCAIQIRirAjIHCAMQIRirAjIHCAQQIRiPAjIHCAUQIRiPAtIBCTIwMzU3ajBqN6gCCLACAQ&sourceid=chrome&ie=UTF-8

https://stackoverflow.com/questions/3957817/calling-generic-method-with-type-variable

            int i = findItemIndex(TagIdEnum.ReferenceTag, TagQualifiertEnum.SEME);
            Console.WriteLine(i);
            int startIndex = findItemIndexByTagNameAndQualifier("16R", "GENL");
            int endIndex = findItemIndexByTagNameAndQualifier("16S", "GENL");
            var result = this.parsedMessage.Block4.Skip(startIndex + 1).Take(endIndex - 1 - startIndex);

            foreach (ITag tag in result)
            {
                Console.WriteLine(tag.TagName);
                Console.WriteLine(tag.SwiftText);
            }

private int findItemIndex (TagIdEnum tagId, TagQualifiertEnum qualifierId)
{
  
    if (!Enum.IsDefined(typeof(TagIdEnum), tagId)) return 0;
    if (!Enum.IsDefined(typeof(TagQualifiertEnum), qualifierId)) return 0;
    try
    {
        string searchTag = EnumHelperHelpers.GetEnumDescription(tagId); ;// Enum.GetName(typeof(TagIdEnum), tagId);
        string searchQual = EnumHelperHelpers.GetEnumDescription(qualifierId); ;//  Enum.GetName(typeof(TagQualifiertEnum), qualifierId);
        IEnumerable<int> indexes = (from item1 in this.parsedMessage.Block4
                                    where item1.TagId == (int)tagId
                                    where item1.Qualifier == searchQual
                                    select this.parsedMessage.Block4.IndexOf(item1));
        Console.WriteLine(indexes.FirstOrDefault());
        return indexes.FirstOrDefault();
    }
    catch (Exception e)
    {
        return 0;
    }
private int findItemIndex<T> (T item, TagIdEnum tagId, TagQualifiertEnum qualifierId)
{
    if (!Enum.IsDefined(typeof(TagIdEnum), tagId)) return 0;
    if (!Enum.IsDefined(typeof(TagQualifiertEnum), qualifierId)) return 0;
    try
    {
        string searchTag = Enum.GetName(typeof(TagIdEnum), tagId);
        string searchQual = Enum.GetName(typeof(TagQualifiertEnum), qualifierId);
        IEnumerable<int> indexes = (from item1 in this.parsedMessage.Block4
                                    where item1.TagId == (int)tagId
                                    where item1.Qualifier == searchQual
                                    select this.parsedMessage.Block4.IndexOf(item1));
        Console.WriteLine(indexes.FirstOrDefault());
        return indexes.FirstOrDefault();
    }
    catch (Exception e)
    {
        return 0;
    }

}



 public static class UtilsExtensions
 {

     public static int  findItemIndex<T>(T itemlist, TagIdEnum tagId, TagQualifiertEnum qualifierId) where T : IEnumerable<T>, IConvertible, IEquatable<T>
     {

         if (!Enum.IsDefined(typeof(TagIdEnum), tagId)) return 0;
         if (!Enum.IsDefined(typeof(TagQualifiertEnum), qualifierId)) return 0;
         try
         {
             string searchTag = EnumHelperHelpers.GetEnumDescription(tagId); ;// Enum.GetName(typeof(TagIdEnum), tagId);
             string searchQual = EnumHelperHelpers.GetEnumDescription(qualifierId); ;//  Enum.GetName(typeof(TagQualifiertEnum), qualifierId);
             IEnumerable<int> indexes = (from item1 in this.parsedMessage.Block4
                                         where item1.TagId == (int)tagId
                                         where item1.Qualifier == searchQual
                                         select this.parsedMessage.Block4.IndexOf(item1));
             Console.WriteLine(indexes.FirstOrDefault());
             return indexes.FirstOrDefault();
         }
         catch (Exception e)
         {
             return 0;
         }

     }
https://stackoverflow.com/questions/21877454/linq-get-all-items-between-2-matching-elements
var startIndex = list.IndexOf(begin);
 var endIndex = list.IndexOf(end);
 var result = list.Skip(startIndex + 1).Take(endIndex - 1 - startIndex);


https://stackoverflow.com/questions/3957817/calling-generic-method-with-type-variable


USE [FundWireInterfaceDB] 
GO 

IF EXISTS(SELECT 1 FROM sys.procedures 
          WHERE Name = 'SP_Insert_FedWireMsgRepo')
BEGIN
    DROP 	PROC SP_Insert_FedWireMsgRepo 
END
GO 
CREATE PROCEDURE SP_Insert_FedWireMsgRepo
  @IMAD varchar(34)= NULL, 
  @OMAD varchar(34)= NULL, 
  @WIREINOUT varchar(64)= NULL, 
  @FormatVersion varchar(2)= NULL, 
  @TestProductionCode varchar(1)= NULL, 
  @MessageDuplication varchar(1)= NULL, 
  @MessageStatus varchar(1)= NULL, 
  @ReceiptDate varchar(4)= NULL, 
  @ReceiptTime varchar(4)= NULL, 
  @ReceiptApplication varchar(4)= NULL, 
  @InputCycleDate varchar(8)= NULL, 
  @InputSource varchar(8)= NULL, 
  @InputSequenceNumber varchar(6)= NULL, 
  @OutputCycleDateDateReceived varchar(8)= NULL, 
  @OutputDestination varchar(8)= NULL, 
  @OutputSequenceNumber varchar(6)= NULL, 
  @OutputDate varchar(4)= NULL, 
  @OutputTime varchar(4)= NULL, 
  @OutputApplication varchar(4)= NULL, 
  @SndFormatVersion varchar(2)= NULL, 
  @SndUserRequestCorrelation varchar(8)= NULL, 
  @SndTestProductionCode varchar(1)= NULL, 
  @SndMessageDuplication varchar(1)= NULL, 
  @TypeSubtype varchar(4)= NULL, 
  @TypeCode varchar(32)= NULL, 
  @TypeCodeDesc varchar(32)= NULL, 
  @TypeSubCode varchar(32)= NULL, 
  @TypeSubCodeDesc varchar(32)= NULL, 
  @SenderABA varchar(9)= NULL, 
  @SenderName varchar(18)= NULL, 
  @SenderReference varchar(16)= NULL, 
  @ReceiverABA varchar(9)= NULL, 
  @ReceiverName varchar(18)= NULL, 
  @BusinessFunction varchar(3)= NULL, 
  @TransactionCode varchar(3)= NULL, 
  @PaymentNotificationContactName varchar(140)= NULL, 
  @TransactionAmount decimal (18, 2)= NULL, 
  @InstructedAmountCurrency varchar(3)= NULL, 
  @InstructedAmount decimal (18, 2)= NULL, 
  @IntemediaryFIIdCode varchar(32)= NULL, 
  @IntemediaryFIIdentifier varchar(34)= NULL, 
  @IntermediaryFIName varchar(35)= NULL, 
  @IntermediaryFIAddressL1 varchar(35)= NULL, 
  @IntermediaryFIAddressL2 varchar(35)= NULL, 
  @IntermediaryFIAddressL3 varchar(35)= NULL, 
  @BeneficiaryFIIdCode varchar(32)= NULL, 
  @BeneficiaryFIIdentifierAccount varchar(34)= NULL, 
  @BeneficiaryFIName varchar(35)= NULL, 
  @BeneficiaryFIAddressL1 varchar(35)= NULL, 
  @BeneficiaryFIAddressL2 varchar(35)= NULL, 
  @BeneficiaryFIAddressL3 varchar(35)= NULL, 
  @BeneficiaryIdCode varchar(32)= NULL, 
  @BeneficiaryIdentifierAccount varchar(34)= NULL, 
  @BeneficiaryName varchar(35)= NULL, 
  @BeneficiaryAddressL1 varchar(35)= NULL, 
  @BeneficiaryAddressL2 varchar(35)= NULL, 
  @BeneficiaryAddressL3 varchar(35)= NULL, 
  @ReferenceForBeneficiary varchar(16)= NULL, 
  @AccountDebitInDrawDownIdCode varchar(32)= NULL, 
  @AccountDebitInDrawDownIdentifier varchar(34)= NULL, 
  @AccountDebitInDrawDownName varchar(35)= NULL, 
  @AccountDebitInDrawDownAddressL1 varchar(35)= NULL, 
  @AccountDebitInDrawDownAddressL2 varchar(35)= NULL, 
  @AccountDebitInDrawDownAddressL3 varchar(35)= NULL, 
  @OriginatorIdCode varchar(32)= NULL, 
  @OriginatorIdentifier varchar(34)= NULL, 
  @OriginatorName varchar(35)= NULL, 
  @OriginatorAddressL1 varchar(35)= NULL, 
  @OriginatorAddressL2 varchar(35)= NULL, 
  @OriginatorAddressL3 varchar(35)= NULL, 
  @OriginatorOptionFIdCode varchar(32)= NULL, 
  @OriginatorOptionFPartyIdentifier varchar(35)= NULL, 
  @OriginatorOptionFPartyName varchar(35)= NULL, 
  @OriginatorOptionFICodeL1 varchar(32)= NULL, 
  @OriginatorOptionFIDetL1 varchar(35)= NULL, 
  @OriginatorOptionFICodeL2 varchar(32)= NULL, 
  @OriginatorOptionFIDetL2 varchar(35)= NULL, 
  @OriginatorOptionFICodeL3 varchar(32)= NULL, 
  @OriginatorOptionFIDetL3 varchar(35)= NULL, 
  @OriginatorFIIdCode varchar(32)= NULL, 
  @OriginatorFIIdentifier varchar(34)= NULL, 
  @OriginatorFIName varchar(35)= NULL, 
  @OriginatorFIAddressL1 varchar(35)= NULL, 
  @OriginatorFIAddressL2 varchar(35)= NULL, 
  @OriginatorFIAddressL3 varchar(35)= NULL, 
  @InstructingFIIdCode varchar(32)= NULL, 
  @InstructingFIIdentifier varchar(34)= NULL, 
  @InstructingFIName varchar(35)= NULL, 
  @InstructingFIAddressL1 varchar(35)= NULL, 
  @InstructingFIAddressL2 varchar(35)= NULL, 
  @InstructingFIAddressL3 varchar(35)= NULL, 
  @DrawDownCreditAccountNumber varchar(9)= NULL, 
  @OriginatortoBeneficiaryInformationL1 varchar(35)= NULL, 
  @OriginatortoBeneficiaryInformationL2 varchar(35)= NULL, 
  @OriginatortoBeneficiaryInformationL3 varchar(35)= NULL, 
  @OriginatortoBeneficiaryInformationL4 varchar(35)= NULL, 
  @ReceiverFIInformation varchar(30)= NULL, 
  @ReceiverFIIAddInformationL1 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL2 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL3 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL4 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL5 varchar(33)= NULL, 
  @IntermediaryFIInformation varchar(30)= NULL, 
  @IntermediaryFIIAddInformationL1 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL2 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL3 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL4 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL5 varchar(33)= NULL, 
  @BeneficiarysFIInformation varchar(30)= NULL, 
  @BeneficiarysFIInformationL1 varchar(33)= NULL, 
  @BeneficiarysFIInformationL2 varchar(33)= NULL, 
  @BeneficiarysFIInformationL3 varchar(33)= NULL, 
  @BeneficiarysFIInformationL4 varchar(33)= NULL, 
  @BeneficiarysFIInformationL5 varchar(33)= NULL, 
  @BeneficiaryInformation varchar(30)= NULL, 
  @BeneficiaryInformationL1 varchar(33)= NULL, 
  @BeneficiaryInformationL2 varchar(33)= NULL, 
  @BeneficiaryInformationL3 varchar(33)= NULL, 
  @BeneficiaryInformationL4 varchar(33)= NULL, 
  @BeneficiaryInformationL5 varchar(33)= NULL, 
  @SwiftInstructedCurrency varchar(3)= NULL, 
  @SwiftInstructedAmount decimal = NULL, 
  @SwiftOrderingCustomerL1 varchar(35)= NULL, 
  @SwiftOrderingCustomerL2 varchar(35)= NULL, 
  @SwiftOrderingCustomerL3 varchar(35)= NULL, 
  @SwiftOrderingCustomerL4 varchar(35)= NULL, 
  @SwiftOrderingCustomerL5 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL1 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL2 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL3 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL4 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL5 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL1 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL2 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL3 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL4 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL5 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL1 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL2 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL3 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL4 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL5 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL1 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL2 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL3 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL4 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL5 varchar(35)= NULL, 
  @SwiftRemittanceInformationL1 varchar(35)= NULL, 
  @SwiftRemittanceInformationL2 varchar(35)= NULL, 
  @SwiftRemittanceInformationL3 varchar(35)= NULL, 
  @SwiftRemittanceInformationL4 varchar(35)= NULL, 
  @SwiftRemittanceInformationL5 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL1 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL2 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL3 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL4 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL5 varchar(35)= NULL, 
  @AddendaInformation varchar(max)= NULL, 
  @previousMessageIdentifier varchar(22)= NULL, 
  @NonProcessedInformation varchar(max)= NULL, 
  @FileName varchar(256)= NULL, 
  @RecordNumber numeric(18, 0)= NULL, 
  @LoadStatus varchar(16)= NULL, 
  @LoadRejectReason varchar(512)= NULL, 
  @CreationDate datetime = NULL, 
  @CreatorId varchar(32) = NULL, 
  @UpdateDate datetime = NULL, 
  @UpdatorId varchar(32)= NULL, 
  @DeletedDate datetime = NULL, 
  @DeleteddBy varchar(32)= NULL, 
  @InternalId numeric(18, 0) out,
  @Status varchar(32) out 
  AS
  BEGIN
    set @Status='Inserted'
	IF NOT EXISTS (SELECT * FROM dbo.FedWireMsgRepo WHERE IMAD = @IMAD)	
		BEGIN
		  INSERT INTO dbo.FedWireMsgRepo (
			[IMAD], 
			[OMAD], 
			[WIREINOUT], 
			[FormatVersion], 
			[TestProductionCode], 
			[MessageDuplication], 
			[MessageStatus], 
			[ReceiptDate], 
			[ReceiptTime], 
			[ReceiptApplication], 
			[InputCycleDate], 
			[InputSource], 
			[InputSequenceNumber], 
			[OutputCycleDateDateReceived], 
			[OutputDestination], 
			[OutputSequenceNumber], 
			[OutputDate], 
			[OutputTime], 
			[OutputApplication], 
			[SndFormatVersion], 
			[SndUserRequestCorrelation], 
			[SndTestProductionCode], 
			[SndMessageDuplication], 
			[TypeSubtype], 
			[TypeCode], 
			[TypeCodeDesc], 
			[TypeSubCode], 
			[TypeSubCodeDesc], 
			[SenderABA], 
			[SenderName], 
			[SenderReference], 
			[ReceiverABA], 
			[ReceiverName], 
			[BusinessFunction], 
			[TransactionCode], 
			[PaymentNotificationContactName], 
			[TransactionAmount], 
			[InstructedAmountCurrency], 
			[InstructedAmount], 
			[IntemediaryFIIdCode], 
			[IntemediaryFIIdentifier], 
			[IntermediaryFIName], 
			[IntermediaryFIAddressL1], 
			[IntermediaryFIAddressL2], 
			[IntermediaryFIAddressL3], 
			[BeneficiaryFIIdCode], 
			[BeneficiaryFIIdentifierAccount], 
			[BeneficiaryFIName], 
			[BeneficiaryFIAddressL1], 
			[BeneficiaryFIAddressL2], 
			[BeneficiaryFIAddressL3], 
			[BeneficiaryIdCode], 
			[BeneficiaryIdentifierAccount], 
			[BeneficiaryName], 
			[BeneficiaryAddressL1], 
			[BeneficiaryAddressL2], 
			[BeneficiaryAddressL3], 
			[ReferenceForBeneficiary], 
			[AccountDebitInDrawDownIdCode], 
			[AccountDebitInDrawDownIdentifier], 
			[AccountDebitInDrawDownName], 
			[AccountDebitInDrawDownAddressL1], 
			[AccountDebitInDrawDownAddressL2], 
			[AccountDebitInDrawDownAddressL3], 
			[OriginatorIdCode], 
			[OriginatorIdentifier], 
			[OriginatorName], 
			[OriginatorAddressL1], 
			[OriginatorAddressL2], 
			[OriginatorAddressL3], 
			[OriginatorOptionFIdCode], 
			[OriginatorOptionFPartyIdentifier], 
			[OriginatorOptionFPartyName], 
			[OriginatorOptionFICodeL1], 
			[OriginatorOptionFIDetL1], 
			[OriginatorOptionFICodeL2], 
			[OriginatorOptionFIDetL2], 
			[OriginatorOptionFICodeL3], 
			[OriginatorOptionFIDetL3], 
			[OriginatorFIIdCode], 
			[OriginatorFIIdentifier], 
			[OriginatorFIName], 
			[OriginatorFIAddressL1], 
			[OriginatorFIAddressL2], 
			[OriginatorFIAddressL3], 
			[InstructingFIIdCode], 
			[InstructingFIIdentifier], 
			[InstructingFIName], 
			[InstructingFIAddressL1], 
			[InstructingFIAddressL2], 
			[InstructingFIAddressL3], 
			[DrawDownCreditAccountNumber], 
			[OriginatortoBeneficiaryInformationL1], 
			[OriginatortoBeneficiaryInformationL2], 
			[OriginatortoBeneficiaryInformationL3], 
			[OriginatortoBeneficiaryInformationL4], 
			[ReceiverFIInformation], 
			[ReceiverFIIAddInformationL1], 
			[ReceiverFIIAddInformationL2], 
			[ReceiverFIIAddInformationL3], 
			[ReceiverFIIAddInformationL4], 
			[ReceiverFIIAddInformationL5], 
			[IntermediaryFIInformation], 
			[IntermediaryFIIAddInformationL1], 
			[IntermediaryFIIAddInformationL2], 
			[IntermediaryFIIAddInformationL3], 
			[IntermediaryFIIAddInformationL4], 
			[IntermediaryFIIAddInformationL5], 
			[BeneficiarysFIInformation], 
			[BeneficiarysFIInformationL1], 
			[BeneficiarysFIInformationL2], 
			[BeneficiarysFIInformationL3], 
			[BeneficiarysFIInformationL4], 
			[BeneficiarysFIInformationL5], 
			[BeneficiaryInformation], 
			[BeneficiaryInformationL1], 
			[BeneficiaryInformationL2], 
			[BeneficiaryInformationL3], 
			[BeneficiaryInformationL4], 
			[BeneficiaryInformationL5], 
			[SwiftInstructedCurrency], 
			[SwiftInstructedAmount], 
			[SwiftOrderingCustomerL1], 
			[SwiftOrderingCustomerL2], 
			[SwiftOrderingCustomerL3], 
			[SwiftOrderingCustomerL4], 
			[SwiftOrderingCustomerL5], 
			[SwiftOrderingInstitutionL1], 
			[SwiftOrderingInstitutionL2], 
			[SwiftOrderingInstitutionL3], 
			[SwiftOrderingInstitutionL4], 
			[SwiftOrderingInstitutionL5], 
			[SwiftIntermiediaryInstitutionL1], 
			[SwiftIntermiediaryInstitutionL2], 
			[SwiftIntermiediaryInstitutionL3], 
			[SwiftIntermiediaryInstitutionL4], 
			[SwiftIntermiediaryInstitutionL5], 
			[SwiftAccountWithInstitutionL1], 
			[SwiftAccountWithInstitutionL2], 
			[SwiftAccountWithInstitutionL3], 
			[SwiftAccountWithInstitutionL4], 
			[SwiftAccountWithInstitutionL5], 
			[SwiftBeneficiaryCustomerL1], 
			[SwiftBeneficiaryCustomerL2], 
			[SwiftBeneficiaryCustomerL3], 
			[SwiftBeneficiaryCustomerL4], 
			[SwiftBeneficiaryCustomerL5], 
			[SwiftRemittanceInformationL1], 
			[SwiftRemittanceInformationL2], 
			[SwiftRemittanceInformationL3], 
			[SwiftRemittanceInformationL4], 
			[SwiftRemittanceInformationL5], 
			[SwiftSenderToReceiverInformationL1], 
			[SwiftSenderToReceiverInformationL2], 
			[SwiftSenderToReceiverInformationL3], 
			[SwiftSenderToReceiverInformationL4], 
			[SwiftSenderToReceiverInformationL5], 
			[AddendaInformation], 
			[previousMessageIdentifier], 
			[NonProcessedInformation], 
			[FileName], 
			[RecordNumber], 
			[LoadStatus], 
			[LoadRejectReason], 
			[CreationDate], 
			[CreatorId], 
			[UpdateDate], 
			[UpdatorId], 
			[DeletedDate], 
			[DeleteddBy]
		  ) output inserted.* 
		SELECT 
		  @IMAD, 
		  @OMAD, 
		  @WIREINOUT, 
		  @FormatVersion, 
		  @TestProductionCode, 
		  @MessageDuplication, 
		  @MessageStatus, 
		  @ReceiptDate, 
		  @ReceiptTime, 
		  @ReceiptApplication, 
		  @InputCycleDate, 
		  @InputSource, 
		  @InputSequenceNumber, 
		  @OutputCycleDateDateReceived, 
		  @OutputDestination, 
		  @OutputSequenceNumber, 
		  @OutputDate, 
		  @OutputTime, 
		  @OutputApplication, 
		  @SndFormatVersion, 
		  @SndUserRequestCorrelation, 
		  @SndTestProductionCode, 
		  @SndMessageDuplication, 
		  @TypeSubtype, 
		  @TypeCode, 
		  @TypeCodeDesc, 
		  @TypeSubCode, 
		  @TypeSubCodeDesc, 
		  @SenderABA, 
		  @SenderName, 
		  @SenderReference, 
		  @ReceiverABA, 
		  @ReceiverName, 
		  @BusinessFunction, 
		  @TransactionCode, 
		  @PaymentNotificationContactName, 
		  @TransactionAmount, 
		  @InstructedAmountCurrency, 
		  @InstructedAmount, 
		  @IntemediaryFIIdCode, 
		  @IntemediaryFIIdentifier, 
		  @IntermediaryFIName, 
		  @IntermediaryFIAddressL1, 
		  @IntermediaryFIAddressL2, 
		  @IntermediaryFIAddressL3, 
		  @BeneficiaryFIIdCode, 
		  @BeneficiaryFIIdentifierAccount, 
		  @BeneficiaryFIName, 
		  @BeneficiaryFIAddressL1, 
		  @BeneficiaryFIAddressL2, 
		  @BeneficiaryFIAddressL3, 
		  @BeneficiaryIdCode, 
		  @BeneficiaryIdentifierAccount, 
		  @BeneficiaryName, 
		  @BeneficiaryAddressL1, 
		  @BeneficiaryAddressL2, 
		  @BeneficiaryAddressL3, 
		  @ReferenceForBeneficiary, 
		  @AccountDebitInDrawDownIdCode, 
		  @AccountDebitInDrawDownIdentifier, 
		  @AccountDebitInDrawDownName, 
		  @AccountDebitInDrawDownAddressL1, 
		  @AccountDebitInDrawDownAddressL2, 
		  @AccountDebitInDrawDownAddressL3, 
		  @OriginatorIdCode, 
		  @OriginatorIdentifier, 
		  @OriginatorName, 
		  @OriginatorAddressL1, 
		  @OriginatorAddressL2, 
		  @OriginatorAddressL3, 
		  @OriginatorOptionFIdCode, 
		  @OriginatorOptionFPartyIdentifier, 
		  @OriginatorOptionFPartyName, 
		  @OriginatorOptionFICodeL1, 
		  @OriginatorOptionFIDetL1, 
		  @OriginatorOptionFICodeL2, 
		  @OriginatorOptionFIDetL2, 
		  @OriginatorOptionFICodeL3, 
		  @OriginatorOptionFIDetL3, 
		  @OriginatorFIIdCode, 
		  @OriginatorFIIdentifier, 
		  @OriginatorFIName, 
		  @OriginatorFIAddressL1, 
		  @OriginatorFIAddressL2, 
		  @OriginatorFIAddressL3, 
		  @InstructingFIIdCode, 
		  @InstructingFIIdentifier, 
		  @InstructingFIName, 
		  @InstructingFIAddressL1, 
		  @InstructingFIAddressL2, 
		  @InstructingFIAddressL3, 
		  @DrawDownCreditAccountNumber, 
		  @OriginatortoBeneficiaryInformationL1, 
		  @OriginatortoBeneficiaryInformationL2, 
		  @OriginatortoBeneficiaryInformationL3, 
		  @OriginatortoBeneficiaryInformationL4, 
		  @ReceiverFIInformation, 
		  @ReceiverFIIAddInformationL1, 
		  @ReceiverFIIAddInformationL2, 
		  @ReceiverFIIAddInformationL3, 
		  @ReceiverFIIAddInformationL4, 
		  @ReceiverFIIAddInformationL5, 
		  @IntermediaryFIInformation, 
		  @IntermediaryFIIAddInformationL1, 
		  @IntermediaryFIIAddInformationL2, 
		  @IntermediaryFIIAddInformationL3, 
		  @IntermediaryFIIAddInformationL4, 
		  @IntermediaryFIIAddInformationL5, 
		  @BeneficiarysFIInformation, 
		  @BeneficiarysFIInformationL1, 
		  @BeneficiarysFIInformationL2, 
		  @BeneficiarysFIInformationL3, 
		  @BeneficiarysFIInformationL4, 
		  @BeneficiarysFIInformationL5, 
		  @BeneficiaryInformation, 
		  @BeneficiaryInformationL1, 
		  @BeneficiaryInformationL2, 
		  @BeneficiaryInformationL3, 
		  @BeneficiaryInformationL4, 
		  @BeneficiaryInformationL5, 
		  @SwiftInstructedCurrency, 
		  @SwiftInstructedAmount, 
		  @SwiftOrderingCustomerL1, 
		  @SwiftOrderingCustomerL2, 
		  @SwiftOrderingCustomerL3, 
		  @SwiftOrderingCustomerL4, 
		  @SwiftOrderingCustomerL5, 
		  @SwiftOrderingInstitutionL1, 
		  @SwiftOrderingInstitutionL2, 
		  @SwiftOrderingInstitutionL3, 
		  @SwiftOrderingInstitutionL4, 
		  @SwiftOrderingInstitutionL5, 
		  @SwiftIntermiediaryInstitutionL1, 
		  @SwiftIntermiediaryInstitutionL2, 
		  @SwiftIntermiediaryInstitutionL3, 
		  @SwiftIntermiediaryInstitutionL4, 
		  @SwiftIntermiediaryInstitutionL5, 
		  @SwiftAccountWithInstitutionL1, 
		  @SwiftAccountWithInstitutionL2, 
		  @SwiftAccountWithInstitutionL3, 
		  @SwiftAccountWithInstitutionL4, 
		  @SwiftAccountWithInstitutionL5, 
		  @SwiftBeneficiaryCustomerL1, 
		  @SwiftBeneficiaryCustomerL2, 
		  @SwiftBeneficiaryCustomerL3, 
		  @SwiftBeneficiaryCustomerL4, 
		  @SwiftBeneficiaryCustomerL5, 
		  @SwiftRemittanceInformationL1, 
		  @SwiftRemittanceInformationL2, 
		  @SwiftRemittanceInformationL3, 
		  @SwiftRemittanceInformationL4, 
		  @SwiftRemittanceInformationL5, 
		  @SwiftSenderToReceiverInformationL1, 
		  @SwiftSenderToReceiverInformationL2, 
		  @SwiftSenderToReceiverInformationL3, 
		  @SwiftSenderToReceiverInformationL4, 
		  @SwiftSenderToReceiverInformationL5, 
		  @AddendaInformation, 
		  @previousMessageIdentifier, 
		  @NonProcessedInformation, 
		  @FileName, 
		  @RecordNumber, 
		  @LoadStatus, 
		  @LoadRejectReason, 
		  @CreationDate, 
		  @CreatorId, 
		  @UpdateDate, 
		  @UpdatorId, 
		  @DeletedDate, 
		  @DeleteddBy;
		  set @Status='Inserted'
          set @InternalId = @@IDENTITY;		  /*= @@IDENTITY */
		END
	ELSE
		BEGIN 
			set @Status='Duplicate';
			set @InternalId =0
		END 
END
GO
___________________________________


USE [CorporateActions]
GO
/****** Object:  StoredProcedure [dbo].[sp_insert_Swift_Message]    Script Date: 11/16/2024 9:19:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [dbo].[sp_insert_Swift_Message]
(
	@Message_ID as varchar(32),
	@MessageType as varchar(3) = Null,
	@SenderBIC as varchar(9) = Null,
	@Depositary_ID as varchar(12) = Null,
	@CorporateActionReference as varchar(16) = Null,
	@Messagefunction as varchar(4) = Null,
	@ProcStatusCode as varchar(4) = Null,
	@Mandatoryvoluntaryindicator as varchar(4) = Null,
	@Eventtype as varchar(4) = Null,
	@SwiftMessage as varchar(max) = Null,
	@SwiftMessageFileName as varchar(64) = Null,
	@Status as varchar(10) = Null,
	@ErrorType as varchar(16) = Null,
	@ErrorReason as varchar(256) = Null,
	@ReceiptDate as datetime = Null,
	@CreationDate as varchar(20) = Null,
	@UpdatedDate as varchar(20) = Null,
	@CancelationDate as varchar(20) = Null,
	@CreatedBy as varchar(35) = Null,
	@UpdatedBy as varchar(35) = Null,
	@CanceledBy as varchar(35) = Null

)
AS

begin transaction

	begin try

		-- insert
			insert [dbo].[Swift_Message] (
				Message_ID,
				MessageType,
				SenderBIC,
				Depositary_ID,
				CorporateActionReference,
				Messagefunction,
				ProcStatusCode,
				Mandatoryvoluntaryindicator,
				Eventtype,
				SwiftMessage,
				SwiftMessageFileName,
				Status,
				ErrorType,
				ErrorReason,
				ReceiptDate,
				CreationDate,
				UpdatedDate,
				CancelationDate,
				CreatedBy,
				UpdatedBy,
				CanceledBy)
			values (
				@Message_ID,
				@MessageType,
				@SenderBIC,
				@Depositary_ID,
				@CorporateActionReference,
				@Messagefunction,
				@ProcStatusCode,
				@Mandatoryvoluntaryindicator,
				@Eventtype,
				@SwiftMessage,
				@SwiftMessageFileName,
				@Status,
				@ErrorType,
				@ErrorReason,
				@ReceiptDate ,
				TRY_PARSE(@CreationDate as datetime),
				TRY_PARSE(@UpdatedDate as datetime),
				TRY_PARSE(@CancelationDate as datetime),
				@CreatedBy,
				@UpdatedBy,
				@CanceledBy)


		-- Return the new ID
		select SCOPE_IDENTITY(), 'success';

		commit transaction

	end try

	begin catch

		declare @ErrorMessage NVARCHAR(4000);
		declare @ErrorSeverity INT;
		declare @ErrorState INT;

		select @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();

		raiserror (@ErrorMessage, @ErrorSeverity, @ErrorState);

		rollback transaction

	end catch;

GO


----------------------------
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [Message_ID]
      ,[MessageType]
      ,[SenderBIC]
      ,[Depositary_ID]
      ,[CorporateActionReference]
      ,[Messagefunction]
      ,[ProcStatusCode]
      ,[Mandatoryvoluntaryindicator]
      ,[Eventtype]
      ,[SwiftMessage]
      ,[SwiftMessageFileName]
      ,[Status]
      ,[ErrorType]
      ,[ErrorReason]
      ,[ReceiptDate]
      ,[CreationDate]
      ,[UpdatedDate]
      ,[CancelationDate]
      ,[CreatedBy]
      ,[UpdatedBy]
      ,[CanceledBy]
  FROM [CorporateActions].[dbo].[Swift_Message]

  truncate table[dbo].[Swift_Message]


  SELECT TRY_PARSE('' AS datetime) AS Result;
----------------------------

CSHARP


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Safra.CorporateActions.Domain.Entities;
using Safra.CorporateActions.Management.Persistence.Interfaces;
using Safra.CorporateActions.Management.Persistence.Contexts;
using Safra.CorporateActions.Management.Persistence.DapperHandler;
using Dapper;
using System.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;


namespace Safra.CorporateActions.Management.Persistence.Services

{

    public class AnnouncementSwiftMessageRepository : IAnnouncementSwiftMessageRepository

    {
        private readonly IConfiguration _configuration;
        private readonly DatabaseContext _dbContext;
        private readonly ILogger<AnnouncementSwiftMessageRepository> _logger;
        public AnnouncementSwiftMessageRepository(IConfiguration configuration,
                                           ILogger<AnnouncementSwiftMessageRepository> logger,
                                           DatabaseContext dbContext)
        {

            _configuration = configuration;
            _dbContext = dbContext;
            _logger = logger;
        }

        public async Task<bool> CreateAnnouncementSwiftMessage(AnnouncementSwiftMessage caSwiftMessage)
        {
            IDbConnection? connection = null;
            SqlMapper.AddTypeHandler(new SqlDateOnlyTypeHandler());
            SqlMapper.AddTypeHandler(new SqlTimeOnlyTypeHandler());
            try
            {
                var sql = "CorporateActions.dbo.sp_insert_Swift_Message " +
                    "@Message_ID, " +
                    "@MessageType, " +
                    "@SenderBIC, " +
                    "@Depositary_ID, " +
                    "@CorporateActionReference, " +
                    "@Messagefunction, " +
                    "@ProcStatusCode, " +
                    "@Mandatoryvoluntaryindicator, " +
                    "@Eventtype, " +
                    "@SwiftMessage, " +
                    "@SwiftMessageFileName, " +
                    "@Status, " +
                    "@ErrorType, " +
                    "@ErrorReason, " +
                    "@ReceiptDate, " +
                    "@CreationDate, " +
                    "@UpdatedDate, " +
                    "@CancelationDate, " +
                    "@CreatedBy, "+
                    "@UpdatedBy, " +
                    "@CanceledBy";

                using (connection = _dbContext.CreateConnection())
                {
                    connection.Open();
                    var parameters = new DynamicParameters();

                    parameters.Add("Message_ID", caSwiftMessage.Message_ID, DbType.String);                    
                    parameters.Add("MessageType", caSwiftMessage.MessageType, DbType.String);
                    parameters.Add("SenderBIC", caSwiftMessage.SenderBIC, DbType.String);
                    parameters.Add("Depositary_ID", caSwiftMessage.Depositary_ID, DbType.String);
                    parameters.Add("CorporateActionReference", caSwiftMessage.CorporateActionReference, DbType.String);
                    parameters.Add("Messagefunction", caSwiftMessage.Messagefunction, DbType.String);
                    parameters.Add("ProcStatusCode", caSwiftMessage.ProcStatusCode, DbType.String);
                    parameters.Add("Mandatoryvoluntaryindicator", caSwiftMessage.Mandatoryvoluntaryindicator, DbType.String);
                    parameters.Add("Eventtype", caSwiftMessage.Eventtype, DbType.String);
                    parameters.Add("SwiftMessage", caSwiftMessage.SwiftMessage, DbType.String);
                    parameters.Add("SwiftMessageFileName", caSwiftMessage.SwiftMessageFileName, DbType.String);

                    parameters.Add("Status", caSwiftMessage.Status, DbType.String);
                    parameters.Add("ErrorType", caSwiftMessage.ErrorType, DbType.String);
                    parameters.Add("ErrorReason", caSwiftMessage.ErrorReason, DbType.String);

                    parameters.Add("ReceiptDate", caSwiftMessage.ReceiptDate, DbType.DateTime); 
                    parameters.Add("CreationDate", caSwiftMessage.CreationDate,DbType.DateTime);
                    parameters.Add("UpdatedDate", caSwiftMessage.UpdatedDate, DbType.DateTime);
                    parameters.Add("CancelationDate", caSwiftMessage.CancelationDate, DbType.DateTime);

                    parameters.Add("CreatedBy", caSwiftMessage.CreatedBy);
                    parameters.Add("UpdatedBy", caSwiftMessage.UpdatedBy);
                    parameters.Add("CanceledBy", caSwiftMessage.CanceledBy);
                  var result=  await connection.ExecuteAsync(sql, parameters);
                    string test = result.ToString();
                    connection.Close();

                }
                return true;  //((object)caSwiftMessage.ReceiptDate) ?? DBNull.Value))
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "{Message}", ex.Message);
                throw;
            }
            finally
            {
                if (connection != null)
                    if (connection.State == ConnectionState.Open)
                        connection.Close();
            }
        }

        public Task<bool> DeleteAnnouncementSwiftMessage(int id)
        {
            throw new NotImplementedException();
        }

        public Task<IEnumerable<AnnouncementSwiftMessage>> GetAllAnnouncementSwiftMessages()
        {
            throw new NotImplementedException();
        }

        public Task<AnnouncementSwiftMessage> GetAnnouncementSwiftMessageById(int id)
        {
            throw new NotImplementedException();
        }

        public Task<bool> UpdateAnnouncementSwiftMessage(AnnouncementSwiftMessage announcementSwiftMessage)
        {
            throw new NotImplementedException();
        }
    }

}



___________________________________


private int InsertFedWireMessage(FedWireMsgRepo fedWireMsgRepo)
        {

            using (SqlCommand command = connection.CreateCommand())
            {

                List<SqlParameter> dictionaryObjectParameters = getFundMessagesParameters(fedWireMsgRepo);
                try
                {
                    command.Parameters.Clear();

                    command.CommandText = "SP_Insert_FedWireMsgRepo";
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddRange(dictionaryObjectParameters.ToArray());
                    command.Parameters["@Status"].Direction = ParameterDirection.Output;
                    command.Parameters["@InternalId"].Direction = ParameterDirection.Output;
                    command.ExecuteNonQuery();

                    string  status = (string)(command.Parameters["@Status"].Value).ToString();
                    int generatedKey = Convert.ToInt32(command.Parameters["@InternalId"].Value);
                                      ;
                    messageRepoInserted = true;
                    if (generatedKey <1 )
                    {
                        messageRepoInserted = false;
                        fedWireMsgRepo.LoadStatus = "FAILED";
                        fedWireMsgRepo.LoadRejectReason = "Failed to insert into Message Repo Table with Status : " + status;
                    }
                    return generatedKey;
                }
                catch (SqlException sqlEx)
                {
                    fedWireMsgRepo.LoadStatus = "Error";
                    fedWireMsgRepo.LoadRejectReason = sqlEx.Message;

                    log.WriteToLog(sqlEx.Message);
                    log.WriteToLog(sqlEx.StackTrace);
                    return -1;

                }
            }

        }




     private List<SqlParameter> getRawMessageParameters(FedWireMsgRepo fedWireMsgRepo)
        {
            List<SqlParameter> sqlParameterlist = new List<SqlParameter>();

            fedWireMsgRepo.CreationDate = DateTime.Now;
            fedWireMsgRepo.UpdateDate = DateTime.Now;
            fedWireMsgRepo.UpdatorId = Environment.UserName;
            fedWireMsgRepo.CreatorId = Environment.UserName;
            fedWireMsgRepo.LoadStatus = "Active";
            
            sqlParameterlist.Add(new SqlParameter("MessageId", ((object)fedMessage.MessageId) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("MessageOrigin", ((object)fedMessage.MessageOrigin) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("OrigineName", ((object)fedMessage.OriginName) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("IncomingOutGoing", ((object)fedMessage.IncomingOutGoing) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("IMAD", ((object)fedWireMsgRepo.IMAD) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("OMAD", ((object)fedWireMsgRepo.OMAD) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("InputCycleDate", ((object)fedWireMsgRepo.InputCycleDate) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("InputSource", ((object)fedWireMsgRepo.InputSource) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("InputSequenceNumber", ((object)fedWireMsgRepo.InputSequenceNumber) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("OutputCycleDateDateReceived", ((object)fedWireMsgRepo.OutputCycleDateDateReceived) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("OutputDestination", ((object)fedWireMsgRepo.OutputDestination) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("OutputSequenceNumber", ((object)fedWireMsgRepo.OutputSequenceNumber) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("OutputDate", ((object)fedWireMsgRepo.OutputDate) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("OutputTime", ((object)fedWireMsgRepo.OutputTime) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("FileId", ((object)fedMessage.FileId) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("ClientId", ((object)fedWireMsgRepo.SenderABA) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("DateReceived", ((object)msgReceivedDate) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("DateLoaded", DateTime.Now));
            sqlParameterlist.Add(new SqlParameter("LoadStatus", ((object)fedWireMsgRepo.LoadStatus) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("LoadRejectReason", ((object)fedWireMsgRepo.LoadRejectReason) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("DataRecord", ((object)fedMessage.MessageData) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("CreationDate", ((object)fedWireMsgRepo.CreationDate) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("CreatorId", ((object)fedWireMsgRepo.CreatorId) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("UpdateDate", ((object)fedWireMsgRepo.UpdateDate) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("UpdatorId", ((object)fedWireMsgRepo.UpdatorId) ?? DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("DeletedDate", DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("DeleteddBy", DBNull.Value));
            sqlParameterlist.Add(new SqlParameter("@InternalId", SqlDbType.Int, (int)ParameterDirection.Output));

            return sqlParameterlist;
        }
		
		
		_________________________________________
		
		
		
		
		USE [FundWireInterfaceDB] 
GO 

IF EXISTS(SELECT 1 FROM sys.procedures 
          WHERE Name = 'SP_Insert_FedWireMsgRepo')
BEGIN
    DROP 	PROC SP_Insert_FedWireMsgRepo 
END
GO 
CREATE PROCEDURE SP_Insert_FedWireMsgRepo
  @IMAD varchar(34)= NULL, 
  @OMAD varchar(34)= NULL, 
  @WIREINOUT varchar(64)= NULL, 
  @FormatVersion varchar(2)= NULL, 
  @TestProductionCode varchar(1)= NULL, 
  @MessageDuplication varchar(1)= NULL, 
  @MessageStatus varchar(1)= NULL, 
  @ReceiptDate varchar(4)= NULL, 
  @ReceiptTime varchar(4)= NULL, 
  @ReceiptApplication varchar(4)= NULL, 
  @InputCycleDate varchar(8)= NULL, 
  @InputSource varchar(8)= NULL, 
  @InputSequenceNumber varchar(6)= NULL, 
  @OutputCycleDateDateReceived varchar(8)= NULL, 
  @OutputDestination varchar(8)= NULL, 
  @OutputSequenceNumber varchar(6)= NULL, 
  @OutputDate varchar(4)= NULL, 
  @OutputTime varchar(4)= NULL, 
  @OutputApplication varchar(4)= NULL, 
  @SndFormatVersion varchar(2)= NULL, 
  @SndUserRequestCorrelation varchar(8)= NULL, 
  @SndTestProductionCode varchar(1)= NULL, 
  @SndMessageDuplication varchar(1)= NULL, 
  @TypeSubtype varchar(4)= NULL, 
  @TypeCode varchar(32)= NULL, 
  @TypeCodeDesc varchar(32)= NULL, 
  @TypeSubCode varchar(32)= NULL, 
  @TypeSubCodeDesc varchar(32)= NULL, 
  @SenderABA varchar(9)= NULL, 
  @SenderName varchar(18)= NULL, 
  @SenderReference varchar(16)= NULL, 
  @ReceiverABA varchar(9)= NULL, 
  @ReceiverName varchar(18)= NULL, 
  @BusinessFunction varchar(3)= NULL, 
  @TransactionCode varchar(3)= NULL, 
  @PaymentNotificationContactName varchar(140)= NULL, 
  @TransactionAmount decimal (18, 2)= NULL, 
  @InstructedAmountCurrency varchar(3)= NULL, 
  @InstructedAmount decimal (18, 2)= NULL, 
  @IntemediaryFIIdCode varchar(32)= NULL, 
  @IntemediaryFIIdentifier varchar(34)= NULL, 
  @IntermediaryFIName varchar(35)= NULL, 
  @IntermediaryFIAddressL1 varchar(35)= NULL, 
  @IntermediaryFIAddressL2 varchar(35)= NULL, 
  @IntermediaryFIAddressL3 varchar(35)= NULL, 
  @BeneficiaryFIIdCode varchar(32)= NULL, 
  @BeneficiaryFIIdentifierAccount varchar(34)= NULL, 
  @BeneficiaryFIName varchar(35)= NULL, 
  @BeneficiaryFIAddressL1 varchar(35)= NULL, 
  @BeneficiaryFIAddressL2 varchar(35)= NULL, 
  @BeneficiaryFIAddressL3 varchar(35)= NULL, 
  @BeneficiaryIdCode varchar(32)= NULL, 
  @BeneficiaryIdentifierAccount varchar(34)= NULL, 
  @BeneficiaryName varchar(35)= NULL, 
  @BeneficiaryAddressL1 varchar(35)= NULL, 
  @BeneficiaryAddressL2 varchar(35)= NULL, 
  @BeneficiaryAddressL3 varchar(35)= NULL, 
  @ReferenceForBeneficiary varchar(16)= NULL, 
  @AccountDebitInDrawDownIdCode varchar(32)= NULL, 
  @AccountDebitInDrawDownIdentifier varchar(34)= NULL, 
  @AccountDebitInDrawDownName varchar(35)= NULL, 
  @AccountDebitInDrawDownAddressL1 varchar(35)= NULL, 
  @AccountDebitInDrawDownAddressL2 varchar(35)= NULL, 
  @AccountDebitInDrawDownAddressL3 varchar(35)= NULL, 
  @OriginatorIdCode varchar(32)= NULL, 
  @OriginatorIdentifier varchar(34)= NULL, 
  @OriginatorName varchar(35)= NULL, 
  @OriginatorAddressL1 varchar(35)= NULL, 
  @OriginatorAddressL2 varchar(35)= NULL, 
  @OriginatorAddressL3 varchar(35)= NULL, 
  @OriginatorOptionFIdCode varchar(32)= NULL, 
  @OriginatorOptionFPartyIdentifier varchar(35)= NULL, 
  @OriginatorOptionFPartyName varchar(35)= NULL, 
  @OriginatorOptionFICodeL1 varchar(32)= NULL, 
  @OriginatorOptionFIDetL1 varchar(35)= NULL, 
  @OriginatorOptionFICodeL2 varchar(32)= NULL, 
  @OriginatorOptionFIDetL2 varchar(35)= NULL, 
  @OriginatorOptionFICodeL3 varchar(32)= NULL, 
  @OriginatorOptionFIDetL3 varchar(35)= NULL, 
  @OriginatorFIIdCode varchar(32)= NULL, 
  @OriginatorFIIdentifier varchar(34)= NULL, 
  @OriginatorFIName varchar(35)= NULL, 
  @OriginatorFIAddressL1 varchar(35)= NULL, 
  @OriginatorFIAddressL2 varchar(35)= NULL, 
  @OriginatorFIAddressL3 varchar(35)= NULL, 
  @InstructingFIIdCode varchar(32)= NULL, 
  @InstructingFIIdentifier varchar(34)= NULL, 
  @InstructingFIName varchar(35)= NULL, 
  @InstructingFIAddressL1 varchar(35)= NULL, 
  @InstructingFIAddressL2 varchar(35)= NULL, 
  @InstructingFIAddressL3 varchar(35)= NULL, 
  @DrawDownCreditAccountNumber varchar(9)= NULL, 
  @OriginatortoBeneficiaryInformationL1 varchar(35)= NULL, 
  @OriginatortoBeneficiaryInformationL2 varchar(35)= NULL, 
  @OriginatortoBeneficiaryInformationL3 varchar(35)= NULL, 
  @OriginatortoBeneficiaryInformationL4 varchar(35)= NULL, 
  @ReceiverFIInformation varchar(30)= NULL, 
  @ReceiverFIIAddInformationL1 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL2 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL3 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL4 varchar(33)= NULL, 
  @ReceiverFIIAddInformationL5 varchar(33)= NULL, 
  @IntermediaryFIInformation varchar(30)= NULL, 
  @IntermediaryFIIAddInformationL1 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL2 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL3 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL4 varchar(33)= NULL, 
  @IntermediaryFIIAddInformationL5 varchar(33)= NULL, 
  @BeneficiarysFIInformation varchar(30)= NULL, 
  @BeneficiarysFIInformationL1 varchar(33)= NULL, 
  @BeneficiarysFIInformationL2 varchar(33)= NULL, 
  @BeneficiarysFIInformationL3 varchar(33)= NULL, 
  @BeneficiarysFIInformationL4 varchar(33)= NULL, 
  @BeneficiarysFIInformationL5 varchar(33)= NULL, 
  @BeneficiaryInformation varchar(30)= NULL, 
  @BeneficiaryInformationL1 varchar(33)= NULL, 
  @BeneficiaryInformationL2 varchar(33)= NULL, 
  @BeneficiaryInformationL3 varchar(33)= NULL, 
  @BeneficiaryInformationL4 varchar(33)= NULL, 
  @BeneficiaryInformationL5 varchar(33)= NULL, 
  @SwiftInstructedCurrency varchar(3)= NULL, 
  @SwiftInstructedAmount decimal = NULL, 
  @SwiftOrderingCustomerL1 varchar(35)= NULL, 
  @SwiftOrderingCustomerL2 varchar(35)= NULL, 
  @SwiftOrderingCustomerL3 varchar(35)= NULL, 
  @SwiftOrderingCustomerL4 varchar(35)= NULL, 
  @SwiftOrderingCustomerL5 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL1 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL2 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL3 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL4 varchar(35)= NULL, 
  @SwiftOrderingInstitutionL5 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL1 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL2 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL3 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL4 varchar(35)= NULL, 
  @SwiftIntermiediaryInstitutionL5 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL1 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL2 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL3 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL4 varchar(35)= NULL, 
  @SwiftAccountWithInstitutionL5 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL1 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL2 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL3 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL4 varchar(35)= NULL, 
  @SwiftBeneficiaryCustomerL5 varchar(35)= NULL, 
  @SwiftRemittanceInformationL1 varchar(35)= NULL, 
  @SwiftRemittanceInformationL2 varchar(35)= NULL, 
  @SwiftRemittanceInformationL3 varchar(35)= NULL, 
  @SwiftRemittanceInformationL4 varchar(35)= NULL, 
  @SwiftRemittanceInformationL5 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL1 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL2 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL3 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL4 varchar(35)= NULL, 
  @SwiftSenderToReceiverInformationL5 varchar(35)= NULL, 
  @AddendaInformation varchar(max)= NULL, 
  @previousMessageIdentifier varchar(22)= NULL, 
  @NonProcessedInformation varchar(max)= NULL, 
  @FileName varchar(256)= NULL, 
  @RecordNumber numeric(18, 0)= NULL, 
  @LoadStatus varchar(16)= NULL, 
  @LoadRejectReason varchar(512)= NULL, 
  @CreationDate datetime = NULL, 
  @CreatorId varchar(32) = NULL, 
  @UpdateDate datetime = NULL, 
  @UpdatorId varchar(32)= NULL, 
  @DeletedDate datetime = NULL, 
  @DeleteddBy varchar(32)= NULL, 
  @InternalId numeric(18, 0) out,
  @Status varchar(32) out 
  AS
  BEGIN
    set @Status='Inserted'
	IF NOT EXISTS (SELECT * FROM dbo.FedWireMsgRepo WHERE IMAD = @IMAD)	
		BEGIN
		  INSERT INTO dbo.FedWireMsgRepo (
			[IMAD], 
			[OMAD], 
			[WIREINOUT], 
			[FormatVersion], 
			[TestProductionCode], 
			[MessageDuplication], 
			[MessageStatus], 
			[ReceiptDate], 
			[ReceiptTime], 
			[ReceiptApplication], 
			[InputCycleDate], 
			[InputSource], 
			[InputSequenceNumber], 
			[OutputCycleDateDateReceived], 
			[OutputDestination], 
			[OutputSequenceNumber], 
			[OutputDate], 
			[OutputTime], 
			[OutputApplication], 
			[SndFormatVersion], 
			[SndUserRequestCorrelation], 
			[SndTestProductionCode], 
			[SndMessageDuplication], 
			[TypeSubtype], 
			[TypeCode], 
			[TypeCodeDesc], 
			[TypeSubCode], 
			[TypeSubCodeDesc], 
			[SenderABA], 
			[SenderName], 
			[SenderReference], 
			[ReceiverABA], 
			[ReceiverName], 
			[BusinessFunction], 
			[TransactionCode], 
			[PaymentNotificationContactName], 
			[TransactionAmount], 
			[InstructedAmountCurrency], 
			[InstructedAmount], 
			[IntemediaryFIIdCode], 
			[IntemediaryFIIdentifier], 
			[IntermediaryFIName], 
			[IntermediaryFIAddressL1], 
			[IntermediaryFIAddressL2], 
			[IntermediaryFIAddressL3], 
			[BeneficiaryFIIdCode], 
			[BeneficiaryFIIdentifierAccount], 
			[BeneficiaryFIName], 
			[BeneficiaryFIAddressL1], 
			[BeneficiaryFIAddressL2], 
			[BeneficiaryFIAddressL3], 
			[BeneficiaryIdCode], 
			[BeneficiaryIdentifierAccount], 
			[BeneficiaryName], 
			[BeneficiaryAddressL1], 
			[BeneficiaryAddressL2], 
			[BeneficiaryAddressL3], 
			[ReferenceForBeneficiary], 
			[AccountDebitInDrawDownIdCode], 
			[AccountDebitInDrawDownIdentifier], 
			[AccountDebitInDrawDownName], 
			[AccountDebitInDrawDownAddressL1], 
			[AccountDebitInDrawDownAddressL2], 
			[AccountDebitInDrawDownAddressL3], 
			[OriginatorIdCode], 
			[OriginatorIdentifier], 
			[OriginatorName], 
			[OriginatorAddressL1], 
			[OriginatorAddressL2], 
			[OriginatorAddressL3], 
			[OriginatorOptionFIdCode], 
			[OriginatorOptionFPartyIdentifier], 
			[OriginatorOptionFPartyName], 
			[OriginatorOptionFICodeL1], 
			[OriginatorOptionFIDetL1], 
			[OriginatorOptionFICodeL2], 
			[OriginatorOptionFIDetL2], 
			[OriginatorOptionFICodeL3], 
			[OriginatorOptionFIDetL3], 
			[OriginatorFIIdCode], 
			[OriginatorFIIdentifier], 
			[OriginatorFIName], 
			[OriginatorFIAddressL1], 
			[OriginatorFIAddressL2], 
			[OriginatorFIAddressL3], 
			[InstructingFIIdCode], 
			[InstructingFIIdentifier], 
			[InstructingFIName], 
			[InstructingFIAddressL1], 
			[InstructingFIAddressL2], 
			[InstructingFIAddressL3], 
			[DrawDownCreditAccountNumber], 
			[OriginatortoBeneficiaryInformationL1], 
			[OriginatortoBeneficiaryInformationL2], 
			[OriginatortoBeneficiaryInformationL3], 
			[OriginatortoBeneficiaryInformationL4], 
			[ReceiverFIInformation], 
			[ReceiverFIIAddInformationL1], 
			[ReceiverFIIAddInformationL2], 
			[ReceiverFIIAddInformationL3], 
			[ReceiverFIIAddInformationL4], 
			[ReceiverFIIAddInformationL5], 
			[IntermediaryFIInformation], 
			[IntermediaryFIIAddInformationL1], 
			[IntermediaryFIIAddInformationL2], 
			[IntermediaryFIIAddInformationL3], 
			[IntermediaryFIIAddInformationL4], 
			[IntermediaryFIIAddInformationL5], 
			[BeneficiarysFIInformation], 
			[BeneficiarysFIInformationL1], 
			[BeneficiarysFIInformationL2], 
			[BeneficiarysFIInformationL3], 
			[BeneficiarysFIInformationL4], 
			[BeneficiarysFIInformationL5], 
			[BeneficiaryInformation], 
			[BeneficiaryInformationL1], 
			[BeneficiaryInformationL2], 
			[BeneficiaryInformationL3], 
			[BeneficiaryInformationL4], 
			[BeneficiaryInformationL5], 
			[SwiftInstructedCurrency], 
			[SwiftInstructedAmount], 
			[SwiftOrderingCustomerL1], 
			[SwiftOrderingCustomerL2], 
			[SwiftOrderingCustomerL3], 
			[SwiftOrderingCustomerL4], 
			[SwiftOrderingCustomerL5], 
			[SwiftOrderingInstitutionL1], 
			[SwiftOrderingInstitutionL2], 
			[SwiftOrderingInstitutionL3], 
			[SwiftOrderingInstitutionL4], 
			[SwiftOrderingInstitutionL5], 
			[SwiftIntermiediaryInstitutionL1], 
			[SwiftIntermiediaryInstitutionL2], 
			[SwiftIntermiediaryInstitutionL3], 
			[SwiftIntermiediaryInstitutionL4], 
			[SwiftIntermiediaryInstitutionL5], 
			[SwiftAccountWithInstitutionL1], 
			[SwiftAccountWithInstitutionL2], 
			[SwiftAccountWithInstitutionL3], 
			[SwiftAccountWithInstitutionL4], 
			[SwiftAccountWithInstitutionL5], 
			[SwiftBeneficiaryCustomerL1], 
			[SwiftBeneficiaryCustomerL2], 
			[SwiftBeneficiaryCustomerL3], 
			[SwiftBeneficiaryCustomerL4], 
			[SwiftBeneficiaryCustomerL5], 
			[SwiftRemittanceInformationL1], 
			[SwiftRemittanceInformationL2], 
			[SwiftRemittanceInformationL3], 
			[SwiftRemittanceInformationL4], 
			[SwiftRemittanceInformationL5], 
			[SwiftSenderToReceiverInformationL1], 
			[SwiftSenderToReceiverInformationL2], 
			[SwiftSenderToReceiverInformationL3], 
			[SwiftSenderToReceiverInformationL4], 
			[SwiftSenderToReceiverInformationL5], 
			[AddendaInformation], 
			[previousMessageIdentifier], 
			[NonProcessedInformation], 
			[FileName], 
			[RecordNumber], 
			[LoadStatus], 
			[LoadRejectReason], 
			[CreationDate], 
			[CreatorId], 
			[UpdateDate], 
			[UpdatorId], 
			[DeletedDate], 
			[DeleteddBy]
		  ) output inserted.* 
		SELECT 
		  @IMAD, 
		  @OMAD, 
		  @WIREINOUT, 
		  @FormatVersion, 
		  @TestProductionCode, 
		  @MessageDuplication, 
		  @MessageStatus, 
		  @ReceiptDate, 
		  @ReceiptTime, 
		  @ReceiptApplication, 
		  @InputCycleDate, 
		  @InputSource, 
		  @InputSequenceNumber, 
		  @OutputCycleDateDateReceived, 
		  @OutputDestination, 
		  @OutputSequenceNumber, 
		  @OutputDate, 
		  @OutputTime, 
		  @OutputApplication, 
		  @SndFormatVersion, 
		  @SndUserRequestCorrelation, 
		  @SndTestProductionCode, 
		  @SndMessageDuplication, 
		  @TypeSubtype, 
		  @TypeCode, 
		  @TypeCodeDesc, 
		  @TypeSubCode, 
		  @TypeSubCodeDesc, 
		  @SenderABA, 
		  @SenderName, 
		  @SenderReference, 
		  @ReceiverABA, 
		  @ReceiverName, 
		  @BusinessFunction, 
		  @TransactionCode, 
		  @PaymentNotificationContactName, 
		  @TransactionAmount, 
		  @InstructedAmountCurrency, 
		  @InstructedAmount, 
		  @IntemediaryFIIdCode, 
		  @IntemediaryFIIdentifier, 
		  @IntermediaryFIName, 
		  @IntermediaryFIAddressL1, 
		  @IntermediaryFIAddressL2, 
		  @IntermediaryFIAddressL3, 
		  @BeneficiaryFIIdCode, 
		  @BeneficiaryFIIdentifierAccount, 
		  @BeneficiaryFIName, 
		  @BeneficiaryFIAddressL1, 
		  @BeneficiaryFIAddressL2, 
		  @BeneficiaryFIAddressL3, 
		  @BeneficiaryIdCode, 
		  @BeneficiaryIdentifierAccount, 
		  @BeneficiaryName, 
		  @BeneficiaryAddressL1, 
		  @BeneficiaryAddressL2, 
		  @BeneficiaryAddressL3, 
		  @ReferenceForBeneficiary, 
		  @AccountDebitInDrawDownIdCode, 
		  @AccountDebitInDrawDownIdentifier, 
		  @AccountDebitInDrawDownName, 
		  @AccountDebitInDrawDownAddressL1, 
		  @AccountDebitInDrawDownAddressL2, 
		  @AccountDebitInDrawDownAddressL3, 
		  @OriginatorIdCode, 
		  @OriginatorIdentifier, 
		  @OriginatorName, 
		  @OriginatorAddressL1, 
		  @OriginatorAddressL2, 
		  @OriginatorAddressL3, 
		  @OriginatorOptionFIdCode, 
		  @OriginatorOptionFPartyIdentifier, 
		  @OriginatorOptionFPartyName, 
		  @OriginatorOptionFICodeL1, 
		  @OriginatorOptionFIDetL1, 
		  @OriginatorOptionFICodeL2, 
		  @OriginatorOptionFIDetL2, 
		  @OriginatorOptionFICodeL3, 
		  @OriginatorOptionFIDetL3, 
		  @OriginatorFIIdCode, 
		  @OriginatorFIIdentifier, 
		  @OriginatorFIName, 
		  @OriginatorFIAddressL1, 
		  @OriginatorFIAddressL2, 
		  @OriginatorFIAddressL3, 
		  @InstructingFIIdCode, 
		  @InstructingFIIdentifier, 
		  @InstructingFIName, 
		  @InstructingFIAddressL1, 
		  @InstructingFIAddressL2, 
		  @InstructingFIAddressL3, 
		  @DrawDownCreditAccountNumber, 
		  @OriginatortoBeneficiaryInformationL1, 
		  @OriginatortoBeneficiaryInformationL2, 
		  @OriginatortoBeneficiaryInformationL3, 
		  @OriginatortoBeneficiaryInformationL4, 
		  @ReceiverFIInformation, 
		  @ReceiverFIIAddInformationL1, 
		  @ReceiverFIIAddInformationL2, 
		  @ReceiverFIIAddInformationL3, 
		  @ReceiverFIIAddInformationL4, 
		  @ReceiverFIIAddInformationL5, 
		  @IntermediaryFIInformation, 
		  @IntermediaryFIIAddInformationL1, 
		  @IntermediaryFIIAddInformationL2, 
		  @IntermediaryFIIAddInformationL3, 
		  @IntermediaryFIIAddInformationL4, 
		  @IntermediaryFIIAddInformationL5, 
		  @BeneficiarysFIInformation, 
		  @BeneficiarysFIInformationL1, 
		  @BeneficiarysFIInformationL2, 
		  @BeneficiarysFIInformationL3, 
		  @BeneficiarysFIInformationL4, 
		  @BeneficiarysFIInformationL5, 
		  @BeneficiaryInformation, 
		  @BeneficiaryInformationL1, 
		  @BeneficiaryInformationL2, 
		  @BeneficiaryInformationL3, 
		  @BeneficiaryInformationL4, 
		  @BeneficiaryInformationL5, 
		  @SwiftInstructedCurrency, 
		  @SwiftInstructedAmount, 
		  @SwiftOrderingCustomerL1, 
		  @SwiftOrderingCustomerL2, 
		  @SwiftOrderingCustomerL3, 
		  @SwiftOrderingCustomerL4, 
		  @SwiftOrderingCustomerL5, 
		  @SwiftOrderingInstitutionL1, 
		  @SwiftOrderingInstitutionL2, 
		  @SwiftOrderingInstitutionL3, 
		  @SwiftOrderingInstitutionL4, 
		  @SwiftOrderingInstitutionL5, 
		  @SwiftIntermiediaryInstitutionL1, 
		  @SwiftIntermiediaryInstitutionL2, 
		  @SwiftIntermiediaryInstitutionL3, 
		  @SwiftIntermiediaryInstitutionL4, 
		  @SwiftIntermiediaryInstitutionL5, 
		  @SwiftAccountWithInstitutionL1, 
		  @SwiftAccountWithInstitutionL2, 
		  @SwiftAccountWithInstitutionL3, 
		  @SwiftAccountWithInstitutionL4, 
		  @SwiftAccountWithInstitutionL5, 
		  @SwiftBeneficiaryCustomerL1, 
		  @SwiftBeneficiaryCustomerL2, 
		  @SwiftBeneficiaryCustomerL3, 
		  @SwiftBeneficiaryCustomerL4, 
		  @SwiftBeneficiaryCustomerL5, 
		  @SwiftRemittanceInformationL1, 
		  @SwiftRemittanceInformationL2, 
		  @SwiftRemittanceInformationL3, 
		  @SwiftRemittanceInformationL4, 
		  @SwiftRemittanceInformationL5, 
		  @SwiftSenderToReceiverInformationL1, 
		  @SwiftSenderToReceiverInformationL2, 
		  @SwiftSenderToReceiverInformationL3, 
		  @SwiftSenderToReceiverInformationL4, 
		  @SwiftSenderToReceiverInformationL5, 
		  @AddendaInformation, 
		  @previousMessageIdentifier, 
		  @NonProcessedInformation, 
		  @FileName, 
		  @RecordNumber, 
		  @LoadStatus, 
		  @LoadRejectReason, 
		  @CreationDate, 
		  @CreatorId, 
		  @UpdateDate, 
		  @UpdatorId, 
		  @DeletedDate, 
		  @DeleteddBy;
		  set @Status='Inserted'
          set @InternalId = @@IDENTITY;		  /*= @@IDENTITY */
		END
	ELSE
		BEGIN 
			set @Status='Duplicate';
			set @InternalId =0
		END 
END
GO

